import assert from 'assert';
const pluginName = 'DynamicImportQuery';
/**
 * This plugin modifies the webpack bootstrap code generated by the plugin at
 * webpack/lib/web/JsonpMainTemplatePlugin.js
 *
 * It will rename the function jsonpScriptSrc generated by that to webpackJsonpScriptSrc
 * and install a new version that check a user provided function for a custom src.
 *
 *   window.__webpack_get_script_src__(chunkId, publicPath, originalSrc)
 *
 * This is only for webpack 4 (tested with 4.43 and 4.44).
 *
 * Webpack 5 has official support for this https://github.com/webpack/webpack/pull/8462
 * so it won't be necessary.
 */
class DynamicImportQueryPlugin {
    constructor() {}

    _applyMainTemplate(mainTemplate) {
        // tapable/lib/Hook.js
        // use stage 1 to ensure this executes after webpack/lib/web/JsonpMainTemplatePlugin.js
        mainTemplate.hooks.localVars.tap(
            { name: pluginName, stage: 1 },
            (source, chunk, hash) => {
                assert(
                    source.includes('function jsonpScriptSrc'),
                    "JsonpScriptSrcPlugin: main template bootstrap source doesn't have function jsonpScriptSrc"
                );
                return `${modSource}

var userGetScriptSrc = window.__webpack_get_script_src__;
function jsonpScriptSrc(chunkId) {
  var src = webpackJsonpScriptSrc(chunkId);
  return (userGetScriptSrc && userGetScriptSrc(chunkId, ${mainTemplate.requireFn}.p, src)) || src;
}
`;
            }
        );
    }

    apply(compiler) {
        compiler.hooks.thisCompilation.tap(pluginName, compilation => {
            this._applyMainTemplate(compilation.mainTemplate);
        });
    }
}

exports.JsonpScriptSrcPlugin = JsonpScriptSrcPlugin;
